Function expressions are useful tools in JavaScript programming. They allow truly dynamic programming where functions need not be named. These anonymous functions, also called lambda functions, are a powerful way to use JavaScript functions. The following is a summary of function expressions:

	Function expressions are different from function declarations. Function declarations require names, while function expressions do not. A function expression without a name is also called an anonymous function.

	With no definitive way to reference a function, recursive functions become more complicated.

	Recursive functions running in nonstrict mode may use arguments.callee to call themselves recursively instead of using the function name, which may change.

Closures are created when functions are defined inside other functions, allowing the closure access to all of the variables inside of the containing function, as follows:

	Behind the scenes, the closure's scope chain contains a variable object for itself, the containing function, and the global context.

	Typically a function's scope and all of its variables are destroyed when the function has finished executing.

	When a closure is returned from that function, its scope remains in memory until the closure no longer exists.

Using closures, it's possible to mimic block scoping in JavaScript, which doesn't exist natively, as follows:

	A function can be created and called immediately, executing the code within it but never leaving a reference to the function.

	This results in all of the variables inside the function being destroyed unless they are specifically set to a variable in the containing scope.

Closures can also be used to create private variables in objects, as follows:

	Even though JavaScript doesn't have a formal concept of private object properties, closures can be used to implement public methods that have access to variables defined within the containing scope.

	Public methods that have access to private variables are called privileged methods.

	Privileged methods can be implemented on custom types using the constructor or prototype patterns and on singletons by using the module or module-augmentation patterns.

Function expressions and closures are extremely powerful in JavaScript and can be used to accomplish many things. Keep in mind that closures maintain extra scopes in memory, so overusing them may result in increased memory consumption.